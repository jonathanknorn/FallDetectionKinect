//#include "opencv2/highgui/highgui.hpp"
//#include <iostream>
//
//using namespace cv;
//using namespace std;
//
//int main(int argc, char* argv[])
//{
//    VideoCapture cap(0); // open the video file for reading
//
//    if ( !cap.isOpened() )  // if not success, exit program
//    {
//         cout << "Cannot open the video file" << endl;
//         return -1;
//    }
//
//    //cap.set(CV_CAP_PROP_POS_MSEC, 300); //start the video at 300ms
//
//    namedWindow("MyVideo",CV_WINDOW_AUTOSIZE); //create a window called "MyVideo"
//
//    while(1)
//    {
//        Mat frame;
//
//        bool bSuccess = cap.read(frame); // read a new frame from video
//
//         if (!bSuccess) //if not success, break loop
//        {
//                        cout << "Cannot read the frame from video file" << endl;
//                       break;
//        }
//
//        imshow("MyVideo", frame); //show the frame in "MyVideo" window
//
//        if(waitKey(15) == 27) //wait for 'esc' key press for 30 ms. If 'esc' key is pressed, break loopÅ¿
//       {
//                cout << "esc key is pressed by user" << endl;
//                break;
//       }
//    }
//
//    return 0;
//
//}


#include<opencv2/opencv.hpp>
#include<iostream>
#include<vector>

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/video/background_segm.hpp>

using namespace cv;

int main(int argc, char *argv[])
{
    Mat frame;
    Mat fore;
    Mat back;
    Mat resizeF;
    //Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method

    VideoCapture cap(0);
    
    //cap.set(CV_CAP_PROP_FRAME_WIDTH, 640);
	//cap.set(CV_CAP_PROP_FRAME_HEIGHT, 488);
   
    
    const int nmixtures =7;
    const bool bShadowDetection = true;
    const int history = 1;

//    Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
//		pMOG2 = new BackgroundSubtractorMOG2();
    BackgroundSubtractorMOG2 bg (history,nmixtures,bShadowDetection);
	bg.set("backgroundRatio",0.01);
    namedWindow("Frame");
   namedWindow("Fore");
   namedWindow("Background");

    for(int i = 0;true;++i)
    {
        cap >> frame;
        resize(frame, resizeF, Size(frame.size().width/4, frame.size().height/4) );
        //if(i%15 == 0){
			bg.operator ()(resizeF,fore, 0.01);
			bg.getBackgroundImage(back);
        
        imshow("Frame",resizeF);
        imshow("Fore",fore);
        imshow("Background",back);
        if(waitKey(30) >= 0) break;
    }
    return 0;
}
/**

//#include < opencv2\opencv.hpp>
//#include < opencv2/core/core.hpp>
//#include < opencv2/highgui/highgui.hpp>
//#include < opencv2/video/background_segm.hpp>


#include<opencv2/opencv.hpp>
#include<iostream>
#include<vector>

using namespace cv;
using namespace std;



int main()
{

 //global variables
 Mat frame; //current frame
 Mat resizeF;
 Mat fgMaskMOG; //fg mask generated by MOG method
 Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
 Mat fgMaskGMG; //fg mask fg mask generated by MOG2 method


 Ptr< BackgroundSubtractor> pMOG; //MOG Background subtractor
 Ptr< BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
 Ptr< BackgroundSubtractorGMG> pGMG; //MOG2 Background subtractor



 pMOG = new BackgroundSubtractorMOG();
 pMOG2 = new BackgroundSubtractorMOG2();
 pGMG = new BackgroundSubtractorGMG();



 VideoCapture stream1(0);   //0 is the id of video device.0 if you have only one camera

 Mat element = getStructuringElement(MORPH_RECT, Size(3, 3), Point(1,1) );

 //unconditional loop
 for(int i = 0; true; ++i){
  Mat cameraFrame;
  if(!(stream1.read(frame))) //get one frame form video
   break;

//  resize(frame, resizeF, Size(frame.size().width/4, frame.size().height/4) );
  if(i % 15 == 0){

//  pMOG->operator()(resizeF, fgMaskMOG);
  pMOG2->operator()(frame, fgMaskMOG2);
//  pGMG->operator()(resizeF, fgMaskGMG);
  //morphologyEx(fgMaskGMG, fgMaskGMG, CV_MOP_OPEN, element);
  }



  imshow("Origin", frame);
//  imshow("MOG", fgMaskMOG);
  imshow("MOG2", fgMaskMOG2);
//  imshow("GMG", fgMaskGMG);


  if (waitKey(30) >= 0)
   break;
 }

}
*/
